from typing import TypedDict, List, Dict, Any, Optional, Annotated
from langgraph.graph.message import add_messages

class OverallAgentState(TypedDict):
    """
    Represents the overall state for the combined agent system.
    This TypedDict defines the schema of the state object that will be passed
    between nodes in the LangGraph, ensuring type safety and clarity.
    """
    messages: Annotated[List[Any], add_messages]
    session_user_id: str
    current_query_user_id: Optional[str]
    language: str
    tools_used: List[str] # From CustomerSupportAgent / CustomAgent
    escalation_needed: bool # From CustomerSupportAgent
    user_data: Optional[Dict[str, Any]] # From CustomerSupportAgent
    current_query: str # Original query, to be passed around
    access_denied: bool # From CustomAgent / CustomerSupportAgent

    # State specific to Router Agent
    next_agent: Optional[str] # The name of the next agent to route to

    # State specific to Knowledge Agent
    question: str # Maps to current_query for the knowledge agent's internal state
    answer: str # The final answer generated by the knowledge agent

    # State specific to Personality Agent
    raw_agent_output: Optional[str] # The raw output from the agent before personality layer
    final_response: Optional[str] # The final, personality-enhanced response for the user

    # Field to capture the execution flow/trace of agents and tools
    workflow_trace: List[Dict[str, Any]]
      